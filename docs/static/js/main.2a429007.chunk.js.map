{"version":3,"sources":["components/ImagePicker.js","components/TextArea.js","utils.js","components/Heading.js","components/Color.js","components/Input.js","settings_schema.js","App.js","serviceWorker.js","index.js"],"names":["ImagePicker","props","react_default","a","createElement","index_es","label","type","FileUpload","TextArea","Object","assign","multiline","translate","content","keys","inputMap","header","color","wrap","style","background","default","borderRadius","height","width","text","TextField","textarea","radio","ChoiceList","checkbox","Checkbox","select","Select","range","RangeSlider","image_picker","Input","settings","objectSpread","value","helpText","info","choices","options","selected","DynamicComponent","react_beautiful_dnd_esm","draggableId","id","originalIndex","index","parseInt","provided","ref","innerRef","draggableProps","dragHandleProps","className","settings_schema","name","App","state","tempJson","settingsSchema","toolbarDraggingIndex","onDragUpdate","result","console","log","dir","JSON","stringify","_this","setState","source","onDragEnd","destination","droppableId","toConsumableArray","sourceSectionIndex","findIndex","setting","split","splice","input","destinationSectionIndex","desinationIndex","outputSchema","output","componentDidMount","handleChange","parse","e","_this2","this","fullWidth","Section","secondary","map","section","key","sectioned","subdued","concat","snapshot","droppableProps","isDraggingOver","length","temp","subsectionIndex","subsection","push","splitByHeaders","headers","inputId","components_Input","placeholder","direction","labelHidden","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAWeA,MARf,SAAqBC,GACnB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,MAAQL,EAAMK,MAAQC,KAAK,SACnCL,EAAAC,EAAAC,cAACC,EAAA,EAASG,WAAV,QCGSC,MANf,SAAkBR,GAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAADK,OAAAC,OAAA,GAAeV,EAAf,CAAsBW,WAAS,MC8B7BC,EAAY,SAACC,GACjB,MAAwB,kBAAbA,EAEFA,EAAO,IAAUA,EAAQJ,OAAOK,KAAKD,GAAS,IAE9CA,GAILE,EAAW,CACfC,OC1CF,SAAiBhB,GACf,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAcJ,EAAMa,UDyCtBI,ME3CF,SAAejB,GACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOc,MAAM,GACXjB,EAAAC,EAAAC,cAAA,OAAKgB,MAAO,CAAEC,WAAYpB,EAAMqB,QAASC,aAAc,MAAOC,OAAQ,OAAQC,MAAO,UACrFvB,EAAAC,EAAAC,cAAA,SAAKH,EAAMK,SFwCfoB,KAAMC,IACNC,SAAUnB,EACVoB,MAAOC,IACPC,SAAUC,IACVC,OAAQC,IACRC,MAAOC,IACPC,aAAcrC,GGzBDsC,MAxBf,SAAerC,GACb,IAAMsC,EAAQ7B,OAAA8B,EAAA,EAAA9B,CAAA,GAAOT,GACrBsC,EAASE,MAAQF,EAASjB,QAC1BiB,EAASG,SAAW7B,EAAU0B,EAASI,MACvCJ,EAASjC,MAAQO,EAAU0B,EAASjC,OACpCiC,EAASzB,QAAUD,EAAU0B,EAASzB,SACtCyB,EAASK,QAAUL,EAASM,QAC5BN,EAASO,SAAWP,EAASjB,QAE7B,IAAMyB,EAAmB/B,EAASuB,EAAShC,MAC3C,OACEL,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAWC,YAAaV,EAASW,GAAG,IAAIX,EAASY,cAAeC,MAAOC,SAASd,EAASY,gBACxF,SAAAG,GACC,OACEpD,EAAAC,EAAAC,cAAA,MAAAM,OAAAC,OAAA,CAAK4C,IAAKD,EAASE,UAAcF,EAASG,eAAoBH,EAASI,gBAAvE,CAAwFC,UAAU,cAC9FZ,EAAmB7C,EAAAC,EAAAC,cAAC2C,EAAqBR,GAAerC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAASmC,EAAShC,MAArB,2BCnBrDqD,EAAA,CACX,CACIC,KAAQ,SACRtB,SAAY,CACR,CACIhC,KAAQ,SACRO,QAAW,MAEf,CACIP,KAAQ,SACRO,QAAW,MAEf,CACGP,KAAQ,QACR2C,GAAM,gBACN5C,MAAS,gBACTuC,QAAW,CACP,CACIJ,MAAS,MACTnC,MAAS,aAEb,CACImC,MAAS,MACTnC,MAAS,cAGjBgB,QAAW,OAEd,CACIf,KAAQ,SACRO,QAAW,MAEf,CACIP,KAAQ,SACRO,QAAW,SC6LZgD,6MArNbC,MAAQ,CACNC,SAAU,GACVC,iBACAC,sBAAuB,KAGzBC,aAAe,SAACC,GACdC,QAAQC,IAAI,UACZD,QAAQE,IAAIC,KAAKC,UAAUL,IAC3BM,EAAKC,SAAS,CAAET,qBAAsBE,EAAOQ,OAAOxB,WAGtDyB,UAAY,SAACT,GACXC,QAAQE,IAAIH,GADU,IAEdU,EAAwBV,EAAxBU,YAAaF,EAAWR,EAAXQ,OAGrB,IAA2B,YAAvBA,EAAOG,aAA8BD,IAKT,YAA5BA,EAAYC,YAAhB,CAKA,IAAMxC,EAAQ7B,OAAAsE,EAAA,EAAAtE,CAAOgE,EAAKX,MAAME,gBAG1BgB,EAAqBP,EAAKX,MAAME,eAAeiB,UAAU,SAAAC,GAC7D,OAAOtE,EAAUsE,EAAQtB,QAAUe,EAAOG,YAAYK,MAAM,KAAK,KAInE,IAAKN,EAGH,OAFAvC,EAAS0C,GAAoB1C,SAAS8C,OAAOT,EAAOxB,MAAO,QAC3DsB,EAAKC,SAAS,CAAEV,eAAgB1B,IAKlC,IAKI+C,EALEC,EAA0Bb,EAAKX,MAAME,eAAeiB,UAAU,SAAAC,GAClE,OAAOtE,EAAUsE,EAAQtB,QAAUiB,EAAYC,YAAYK,MAAM,KAAK,KAGpEI,EAAkBV,EAAY1B,MAGP,YAAvBwB,EAAOG,YAITO,EAAQ,CAAE/E,KAAM,SAAUO,QAAS,YAGnCwE,EAAQ/C,EAAS0C,GAAoB1C,SAASqC,EAAOxB,OACrDb,EAAS0C,GAAoB1C,SAAS8C,OAAOT,EAAOxB,MAAO,IAG7Db,EAASgD,GAAyBhD,SAAS8C,OAAOG,EAAiB,EAAGF,GACtEZ,EAAKC,SAAS,CAAEV,eAAgB1B,IAEhCmC,EAAKe,mBAGPA,aAAe,WACb,IAAMC,EAAMhF,OAAAsE,EAAA,EAAAtE,CAAOgE,EAAKX,MAAME,gBAC9BS,EAAKC,SAAS,CAAEX,SAAUQ,KAAKC,UAAUiB,EAAQ,KAAM,QAGzDC,kBAAoB,WAClBjB,EAAKe,kBAGPG,aAAe,SAAC5B,GACdU,EAAKC,SAAS,CAAEX,aAChB,IACE,IAAMC,EAAiBO,KAAKqB,MAAM7B,GAClCU,EAAKC,SAAS,CAAEV,mBAChBI,QAAQC,IAAI,cACZ,MAAOwB,GACPzB,QAAQC,IAAI,oGAIP,IAAAyB,EAAAC,KACP,OACA9F,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAiB6B,UAAWmB,KAAKnB,UAAWV,aAAc6B,KAAK7B,cAC/DjE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM4F,WAAS,GACb/F,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAO6F,QAAR,CAAgBC,WAAS,GACzBjG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEI2F,KAAKjC,MAAME,eAAemC,KAAOJ,KAAKjC,MAAME,eAAemC,IAAI,SAACC,GAEhE,GAAoB,cAAhBA,EAAQxC,KAEZ,OACE3D,EAAAC,EAAAC,cAAA,OAAKkG,IAAKzF,EAAUwF,EAAQxC,OAC1B3D,EAAAC,EAAAC,cAACC,EAAA,EAAK6F,QAAN,KACEhG,EAAAC,EAAAC,cAAA,SAAKS,EAAUwF,EAAQxC,QAEzB3D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkG,WAAS,EAACC,SAAO,GACrBtG,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAW+B,YAAW,GAAA0B,OAAK5F,EAAUwF,EAAQxC,QAC1C,SAACP,EAAUoD,GAAX,OACCxG,EAAAC,EAAAC,cAAA,MAAAM,OAAAC,OAAA,CAAK4C,IAAKD,EAASE,UAAcF,EAASqD,eAA1C,CAA0DhD,UAAW+C,EAASE,eAAiB,6BAA+B,aAEzHP,EAAQ9D,SAASsE,QAAU3G,EAAAC,EAAAC,cAAA,KAAGuD,UAAU,gBAAb,4BAG5B0C,EAAQ9D,UL9Gb,SAAC8D,GACtB,IAAIjB,EAAQ,GACR0B,EAAO,GACX,IAAK,IAAIC,KAAmBV,EAAS,CACnC,IAAIW,EAAUtG,OAAA8B,EAAA,EAAA9B,CAAA,GAAO2F,EAAQU,IAK7BC,EAAW7D,cAAgB4D,EAEH,WAApBC,EAAWzG,MAAqBuG,EAAKD,SAEvCzB,EAAM6B,KAANvG,OAAAsE,EAAA,EAAAtE,CAAeoG,IACfA,EAAO,IAETA,EAAKG,KAAKD,GAGZ,OADA5B,EAAM6B,KAANvG,OAAAsE,EAAA,EAAAtE,CAAeoG,IACR1B,EK2FuC8B,CAAeb,EAAQ9D,UAAU6D,IAAI,SAAAe,GAEvD,GAAKA,EAAQ,GAAb,CAEA,IAAMjE,EAAKmD,EAAQxC,MAAQsD,EAAQ,GAAGjE,IAAMrC,EAAUsG,EAAQ,GAAGrG,UAAYD,EAAUsG,EAAQ,GAAG7G,QAClG,OACEJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMkG,WAAS,EAACD,IAAKpD,EAAIsD,QAASE,EAASE,gBACzC1G,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACI8G,GAAWA,EAAQf,IAAI,SAAAjB,GACrB,IAAIiC,EASJ,OARIjC,EAAQjC,GACVkE,EAAUjC,EAAQjC,GACTiC,EAAQ7E,MACjB8G,EAAUlE,EAAKrC,EAAUsE,EAAQ7E,OACxB6E,EAAQrE,UACjBsG,EAAUlE,EAAKrC,EAAUsE,EAAQrE,UAEnCqE,EAAQjC,GAAKkE,EAEXlH,EAAAC,EAAAC,cAACiH,EAAD3G,OAAAC,OAAA,GAAWwE,EAAX,CAAoBmB,IAAKc,OAI9B9D,EAASgE,0BAgBpCpH,EAAAC,EAAAC,cAACC,EAAA,EAAO6F,QAAR,CAAgBC,WAAS,GACvBjG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAK6F,QAAN,KACAhG,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAW+B,YAAY,UAAUwC,UAAU,cACxC,SAACjE,GAAD,OACCpD,EAAAC,EAAAC,cAAA,MAAAM,OAAAC,OAAA,CAAK4C,IAAKD,EAASE,UAAcF,EAASqD,eAA1C,CAA0DzD,GAAG,YAC3DhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAWC,YAAY,UAAUG,MAAO,GACrC,SAAAE,GACC,OACEpD,EAAAC,EAAAC,cAAA,MAAAM,OAAAC,OAAA,CAAK4C,IAAKD,EAASE,UAAcF,EAASG,eAAoBH,EAASI,gBAAvE,CAAwFC,UAA+C,IAApCoC,EAAKhC,MAAMG,qBAA6B,WAAa,SACtJhE,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAKXF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAWC,YAAY,QAAQG,MAAO,GACnC,SAAAE,GACC,OACEpD,EAAAC,EAAAC,cAAA,MAAAM,OAAAC,OAAA,CAAK4C,IAAKD,EAASE,UAAcF,EAASG,eAAoBH,EAASI,gBAAvE,CAAwFC,UAA+C,IAApCoC,EAAKhC,MAAMG,qBAA6B,WAAa,SACtJhE,EAAAC,EAAAC,cAAA,SAAOG,KAAK,UADd,YAMNL,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAWC,YAAY,WAAWG,MAAO,GACtC,SAAAE,GACC,OACEpD,EAAAC,EAAAC,cAAA,MAAAM,OAAAC,OAAA,CAAK4C,IAAKD,EAASE,UAAcF,EAASG,eAAoBH,EAASI,gBAAvE,CAAwFC,UAA+C,IAApCoC,EAAKhC,MAAMG,qBAA6B,WAAa,SACtJhE,EAAAC,EAAAC,cAAA,SAAOG,KAAK,aADd,qBAadL,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAK6F,QAAN,KACEhG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEmH,YAAY,OACZF,YAAY,OACZG,SAAUzB,KAAKJ,aACfnD,MAAOuD,KAAKjC,MAAMC,SAClBpD,WAAS,kBAxMX8G,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/H,EAAAC,EAAAC,cAAC8H,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a429007.chunk.js","sourcesContent":["import React from 'react';\nimport { DropZone } from '@shopify/polaris';\n\nfunction ImagePicker(props) {\n  return (\n    <DropZone label={ props.label } type=\"image\">\n      <DropZone.FileUpload />\n    </DropZone>\n  )\n}\n\nexport default ImagePicker;\n","import React from 'react';\nimport { TextField } from '@shopify/polaris';\n\nfunction TextArea(props) {\n  return (\n    <TextField {...props} multiline />\n  )\n}\n\nexport default TextArea;\n","import Color from './components/Color';\nimport Heading from './components/Heading';\nimport ImagePicker from './components/ImagePicker';\nimport TextArea from './components/TextArea';\nimport {\n  TextField,\n  ChoiceList,\n  Checkbox,\n  Select,\n  RangeSlider,\n} from '@shopify/polaris';\n\nconst splitByHeaders = (section) => {\n  let split = [];\n  let temp = [];\n  for (let subsectionIndex in section) {\n    let subsection = {...section[subsectionIndex]}\n\n    // Settings are broken up into sections,\n    // we need to keep track of their original index\n    // so we can rearrange later\n    subsection.originalIndex = subsectionIndex\n\n    if (subsection.type === 'header' && temp.length) {\n      // Push what we have so far and reset temp\n      split.push([...temp]);\n      temp = [];\n    }\n    temp.push(subsection);\n  }\n  split.push([...temp]);\n  return split;\n}\n\n// Label might be a string or a hash of translations\nconst translate = (content) => {\n  if (typeof(content) === 'object') {\n    // Pull out english if it's available otherwise the first translation\n    return content['en'] || content[Object.keys(content)[0]]\n  } else {\n    return content;\n  }\n}\n\nconst inputMap = {\n  header: Heading,\n  color: Color,\n  text: TextField,\n  textarea: TextArea,\n  radio: ChoiceList,\n  checkbox: Checkbox,\n  select: Select,\n  range: RangeSlider,\n  image_picker: ImagePicker,\n}\n\nexport { splitByHeaders, translate, inputMap };\n","import React from 'react';\nimport { Subheading } from '@shopify/polaris';\n\nfunction Heading(props) {\n  return (\n    <Subheading>{ props.content }</Subheading>\n  )\n}\n\nexport default Heading;\n","import React from 'react';\nimport { Stack } from '@shopify/polaris';\n\nfunction Color(props) {\n  return (\n    <Stack wrap={false}>\n      <div style={{ background: props.default, borderRadius: '3px', height: '19px', width: '38px' }}></div>\n      <p>{ props.label }</p>\n    </Stack>\n  )\n}\n\nexport default Color;\n","import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { translate, inputMap } from '../utils';\n\nfunction Input(props) {\n  const settings = {...props};\n  settings.value = settings.default;\n  settings.helpText = translate(settings.info);\n  settings.label = translate(settings.label);\n  settings.content = translate(settings.content);\n  settings.choices = settings.options;\n  settings.selected = settings.default;\n\n  const DynamicComponent = inputMap[settings.type];\n  return (\n    <Draggable draggableId={settings.id+'-'+settings.originalIndex} index={parseInt(settings.originalIndex)}>\n    {provided => {\n      return (\n        <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className=\"draggable\">\n          { DynamicComponent ? <DynamicComponent {...settings} /> : <p><strong>{settings.type}</strong> not supported yet!</p> }\n        </div>\n      )\n    }}\n    </Draggable>\n  )\n\n}\n\nexport default Input;\n","export default [\n    {\n        \"name\": \"Colors\",\n        \"settings\": [\n            {\n                \"type\": \"header\",\n                \"content\": \"H1\"\n            },\n            {\n                \"type\": \"header\",\n                \"content\": \"H2\"\n            },\n            {\n               \"type\": \"radio\",\n               \"id\": \"radio_example\",\n               \"label\": \"Radio Example\",\n               \"options\": [\n                   {\n                       \"value\": \"one\",\n                       \"label\": \"Radio one\"\n                   },\n                   {\n                       \"value\": \"two\",\n                       \"label\": \"Radio two\"\n                   }\n               ],\n               \"default\": \"two\"\n           },\n            {\n                \"type\": \"header\",\n                \"content\": \"H3\"\n            },\n            {\n                \"type\": \"header\",\n                \"content\": \"H4\"\n            }\n        ]\n    }\n]\n\n// [\n//   {\n//     \"name\": \"theme_info\",\n//     \"theme_name\": \"Debut\",\n//     \"theme_author\": \"Shopify\",\n//     \"theme_version\": \"10.1.1\",\n//     \"theme_documentation_url\": \"https://help.shopify.com/manual/using-themes/themes-by-shopify/debut\",\n//     \"theme_support_url\": \"https://support.shopify.com/\"\n//   },\n//   {\n//     \"name\": \"Colors\",\n//     \"settings\": [\n//       {\n//         \"type\": \"header\",\n//         \"content\": \"Another Heading Example\"\n//       },\n//       {\n//         \"type\": \"header\",\n//         \"content\": \"Heading Example\"\n//       },\n//       {\n//         \"type\": \"color\",\n//         \"label\": \"Colour Example\",\n//         \"id\": \"color_example\",\n//         \"default\": \"#333333\"\n//       },\n//       {\n//          \"type\": \"text\",\n//          \"id\": \"text_example\",\n//          \"default\": \"\",\n//          \"placeholder\": \"placeholder\",\n//          \"label\": \"Text Example\",\n//       },\n//       {\n//          \"type\": \"textarea\",\n//          \"id\": \"textarea_example\",\n//          \"label\": \"Textarea Example\",\n//       },\n//       {\n//          \"type\":      \"radio\",\n//          \"id\":        \"radio_example\",\n//          \"label\":     \"Radio Example\",\n//          \"options\": [\n//            { \"value\": \"one\", \"label\": \"Radio one\" },\n//            { \"value\": \"two\", \"label\": \"Radio two\" }\n//          ],\n//          \"default\":   \"two\"\n//       },\n//       {\n//          \"type\":      \"checkbox\",\n//          \"id\":        \"checkbox_example\",\n//          \"label\":     \"Checkbox Example\",\n//          \"default\":   false,\n//       },\n//       {\n//          \"type\":      \"select\",\n//          \"id\":        \"select_example\",\n//          \"label\":     \"Select Example\",\n//          \"options\": [\n//            {\n//              \"value\": \"Option 1\",\n//              \"label\": \"Option 1\"\n//            },\n//            {\n//              \"value\": \"Option 2\",\n//              \"label\": \"Option 2\"\n//            }\n//          ],\n//          \"default\":   \"Option 2\",\n//       },\n//       {\n//         \"type\":      \"range\",\n//         \"id\":        \"range_example\",\n//         \"min\":       12,\n//         \"max\":        18,\n//         \"step\":       1,\n//         \"unit\":       \"px\",\n//         \"label\":     \"Range Example\",\n//         \"default\":   16,\n//       },\n//       {\n//         \"type\": \"image_picker\",\n//         \"id\": \"image_picker_example\",\n//         \"label\": \"Image Picker Example\"\n//       }\n//     ]\n//   },\n//   {\n//     \"name\": \"Typography\",\n//     \"settings\": [\n//       {\n//         \"type\": \"header\",\n//         \"content\": \"Boop\"\n//       }\n//     ]\n//   }\n// ];\n","import React, { Component } from 'react';\nimport './App.css';\nimport { AppProvider, Page, Card, Layout, TextField, FormLayout, Stack } from '@shopify/polaris';\nimport Sticky from 'react-stickynode';\nimport Input from './components/Input';\nimport settingsSchema from './settings_schema.js';\nimport { splitByHeaders, translate } from './utils';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nclass App extends Component {\n  state = {\n    tempJson: '',\n    settingsSchema,\n    toolbarDraggingIndex: -1\n  };\n\n  onDragUpdate = (result) => {\n    console.log('update')\n    console.dir(JSON.stringify(result))\n    this.setState({ toolbarDraggingIndex: result.source.index })\n  };\n\n  onDragEnd = (result) => {\n    console.dir(result)\n    const { destination, source } = result;\n\n    // Ignore toolbar components dropped elsewhere\n    if (source.droppableId === 'toolbar' && !destination) {\n      return;\n    }\n\n    // Ignore components dropped onto the toolbar\n    if (destination.droppableId === 'toolbar') {\n      return;\n    }\n\n    // Clone the settings\n    const settings = [...this.state.settingsSchema];\n\n    // Which section is our source in?\n    const sourceSectionIndex = this.state.settingsSchema.findIndex(setting => {\n      return translate(setting.name) === source.droppableId.split('_')[0]\n    })\n\n    // Allow items to be removed\n    if (!destination) {\n      settings[sourceSectionIndex].settings.splice(source.index, 1);\n      this.setState({ settingsSchema: settings })\n      return;\n    }\n\n    // Which section is our source going to?\n    const destinationSectionIndex = this.state.settingsSchema.findIndex(setting => {\n      return translate(setting.name) === destination.droppableId.split('_')[0]\n    })\n\n    let desinationIndex = destination.index;\n    let input;\n\n    if (source.droppableId === 'toolbar') {\n      // if (settings[sourceSectionIndex].settings.find(setting => setting.content === 'HEADERZ')) {\n      //\n      // }\n      input = { type: \"header\", content: \"Heading\" }\n    } else {\n      // Reference the input, move it\n      input = settings[sourceSectionIndex].settings[source.index];\n      settings[sourceSectionIndex].settings.splice(source.index, 1);\n    }\n\n    settings[destinationSectionIndex].settings.splice(desinationIndex, 0, input);\n    this.setState({ settingsSchema: settings })\n\n    this.outputSchema();\n  }\n\n  outputSchema = () => {\n    const output = [...this.state.settingsSchema];\n    this.setState({ tempJson: JSON.stringify(output, null, 4) });\n  }\n\n  componentDidMount = () => {\n    this.outputSchema();\n  }\n\n  handleChange = (tempJson) => {\n    this.setState({ tempJson });\n    try {\n      const settingsSchema = JSON.parse(tempJson);\n      this.setState({ settingsSchema });\n      console.log('Valid JSON');\n    } catch (e) {\n      console.log('Waiting for valid JSON');\n    }\n  };\n\n  render() {\n    return (\n    <DragDropContext onDragEnd={this.onDragEnd} onDragUpdate={this.onDragUpdate}>\n    <AppProvider>\n      <Page fullWidth>\n        <Layout>\n          <Layout.Section secondary>\n          <Card>\n            {\n              this.state.settingsSchema.map && this.state.settingsSchema.map((section) => {\n\n              if (section.name == 'theme_info') return\n\n              return (\n                <div key={translate(section.name)}>\n                  <Card.Section>\n                    <p>{ translate(section.name) }</p>\n                  </Card.Section>\n                  <Card sectioned subdued>\n                    <Droppable droppableId={`${translate(section.name)}`}>\n                      {(provided, snapshot) => (\n                        <div ref={provided.innerRef} {...provided.droppableProps} className={snapshot.isDraggingOver ? 'card-dragging-over preview' : 'preview'}>\n\n                          { !section.settings.length && <p className=\"drop-message\">Drop some settings here.</p>}\n\n\n                          { section.settings && splitByHeaders(section.settings).map(headers => {\n                              // Handle empty sections\n                              if (!headers[0]) return\n\n                              const id = section.name + (headers[0].id || translate(headers[0].content) || translate(headers[0].label))\n                              return (\n                                <Card sectioned key={id} subdued={snapshot.isDraggingOver}>\n                                  <FormLayout>\n                                    { headers && headers.map(setting => {\n                                        let inputId;\n                                        if (setting.id) {\n                                          inputId = setting.id;\n                                        } else if (setting.label) {\n                                          inputId = id + translate(setting.label);\n                                        } else if (setting.content) {\n                                          inputId = id + translate(setting.content);\n                                        }\n                                        setting.id = inputId\n                                        return (\n                                          <Input {...setting} key={inputId} />\n                                        )\n                                      })\n                                    }\n                                    {provided.placeholder}\n                                  </FormLayout>\n                                </Card>\n                              )\n                            })\n                          }\n                        </div>\n                      )}\n                    </Droppable>\n                  </Card>\n                </div>\n              )\n            })\n          }\n          </Card>\n          </Layout.Section>\n          <Layout.Section secondary>\n            <Card>\n              <Card.Section>\n              <Droppable droppableId=\"toolbar\" direction=\"horizontal\">\n                {(provided) => (\n                  <div ref={provided.innerRef} {...provided.droppableProps} id=\"toolbar\">\n                    <Stack>\n                      <Draggable draggableId=\"heading\" index={0}>\n                        {provided => {\n                          return (\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={this.state.toolbarDraggingIndex === 0 ? 'dragging' : 'lock'}>\n                              <p><strong>Heading</strong></p>\n                            </div>\n                          )\n                        }}\n                      </Draggable>\n                      <Draggable draggableId=\"radio\" index={1}>\n                        {provided => {\n                          return (\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={this.state.toolbarDraggingIndex === 1 ? 'dragging' : 'lock'}>\n                              <input type=\"radio\"/> Radio\n                            </div>\n                          )\n                        }}\n                      </Draggable>\n                      <Draggable draggableId=\"checkbox\" index={2}>\n                        {provided => {\n                          return (\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={this.state.toolbarDraggingIndex === 2 ? 'dragging' : 'lock'}>\n                              <input type=\"checkbox\"/> Checkbox\n                            </div>\n                          )\n                        }}\n                      </Draggable>\n                    </Stack>\n                  </div>\n                )}\n                </Droppable>\n              </Card.Section>\n            </Card>\n\n              <Card>\n                <Card.Section>\n                  <TextField\n                    labelHidden=\"true\"\n                    placeholder=\"json\"\n                    onChange={this.handleChange}\n                    value={this.state.tempJson}\n                    multiline\n                  />\n                </Card.Section>\n              </Card>\n\n          </Layout.Section>\n        </Layout>\n      </Page>\n    </AppProvider>\n    </DragDropContext>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@shopify/polaris/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}