{"version":3,"sources":["components/ImagePicker.js","components/TextArea.js","utils.js","components/Heading.js","components/Color.js","components/Input.js","settings_schema.js","App.js","serviceWorker.js","index.js"],"names":["ImagePicker","props","react_default","a","createElement","index_es","label","type","FileUpload","TextArea","Object","assign","multiline","translate","content","keys","inputs","header","component","json","color","wrap","style","background","default","borderRadius","height","width","id","text","TextField","placeholder","textarea","info","radio","ChoiceList","options","value","checkbox","Checkbox","select","Select","range","RangeSlider","min","max","step","unit","image_picker","Input","settings","objectSpread","helpText","choices","selected","DynamicComponent","react_beautiful_dnd_esm","draggableId","originalIndex","index","parseInt","provided","ref","innerRef","draggableProps","dragHandleProps","className","settings_schema","name","App","state","tempJson","settingsSchema","dragging","onDragUpdate","_ref","_this","setState","onDragEnd","result","console","dir","destination","source","droppableId","toConsumableArray","sourceSectionIndex","findIndex","setting","split","splice","input","destinationSectionIndex","desinationIndex","outputSchema","updateDimensions","document","querySelector","maxHeight","window","innerHeight","componentWillUnmount","removeEventListener","output","JSON","stringify","componentDidMount","addEventListener","handleChange","parse","log","e","_this2","this","fullWidth","Section","direction","droppableProps","map","key","subdued","secondary","section","sectioned","concat","snapshot","isDraggingOver","length","temp","subsectionIndex","subsection","push","splitByHeaders","headers","inputId","components_Input","labelHidden","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63291997.chunk.js","sourcesContent":["import React from 'react';\nimport { DropZone } from '@shopify/polaris';\n\nfunction ImagePicker(props) {\n  return (\n    <DropZone label={ props.label } type=\"image\">\n      <DropZone.FileUpload />\n    </DropZone>\n  )\n}\n\nexport default ImagePicker;\n","import React from 'react';\nimport { TextField } from '@shopify/polaris';\n\nfunction TextArea(props) {\n  return (\n    <TextField {...props} multiline />\n  )\n}\n\nexport default TextArea;\n","import Color from './components/Color';\nimport Heading from './components/Heading';\nimport ImagePicker from './components/ImagePicker';\nimport TextArea from './components/TextArea';\nimport {\n  TextField,\n  ChoiceList,\n  Checkbox,\n  Select,\n  RangeSlider,\n} from '@shopify/polaris';\n\nconst splitByHeaders = (section) => {\n  let split = [];\n  let temp = [];\n  for (let subsectionIndex in section) {\n    let subsection = {...section[subsectionIndex]}\n\n    // Settings are broken up into sections,\n    // we need to keep track of their original index\n    // so we can rearrange later\n    subsection.originalIndex = subsectionIndex\n\n    if (subsection.type === 'header' && temp.length) {\n      // Push what we have so far and reset temp\n      split.push([...temp]);\n      temp = [];\n    }\n    temp.push(subsection);\n  }\n  split.push([...temp]);\n  return split;\n}\n\n// Label might be a string or a hash of translations\nconst translate = (content) => {\n  if (typeof(content) === 'object') {\n    // Pull out english if it's available otherwise the first translation\n    return content['en'] || content[Object.keys(content)[0]]\n  } else {\n    return content;\n  }\n}\n\nconst inputs = {\n  header: {\n    component: Heading,\n    json: {\n      type: \"header\",\n      content: \"Heading Example\"\n    }\n  },\n  color: {\n    component: Color,\n    json: {\n      type: \"color\",\n      label: \"Colour Example\",\n      id: \"color_example\",\n      default: \"#333333\"\n    }\n  },\n  text: {\n    component: TextField,\n    json: {\n      type: \"text\",\n      id: \"text_example\",\n      default: \"\",\n      placeholder: \"placeholder\",\n      label: \"Text Example\",\n    }\n  },\n  textarea: {\n    component: TextArea,\n    json: {\n      type: \"textarea\",\n      id: \"textarea_example\",\n      label: \"Textarea Example\",\n      info: \"\"\n    }\n  },\n  radio: {\n    component: ChoiceList,\n    json: {\n      type: \"radio\",\n      id: \"radio_example\",\n      label: \"Radio Example\",\n      options: [\n        { value: \"one\", label: \"Radio one\" },\n        { value: \"two\", label: \"Radio two\" }\n      ],\n      default: \"two\"\n    }\n  },\n  checkbox: {\n    component: Checkbox,\n    json: {\n      type: \"checkbox\",\n      id: \"checkbox_example\",\n      label: \"Checkbox Example\",\n      default: false,\n      info: \"Optional information about this checkbox\"\n    }\n  },\n  select: {\n    component: Select,\n    json: {\n      type: \"select\",\n      id: \"select_example\",\n      label: \"Select Example\",\n      options: [\n        { value: \"Option 1\", label: \"Option 1\" },\n        { value: \"Option 2\", label: \"Option 2\" }\n      ],\n      default: \"Option 2\",\n      info: \"Optional information about this select\"\n    }\n  },\n  range: {\n    component: RangeSlider,\n    json: {\n      type: \"range\",\n      id: \"range_example\",\n      min: 12,\n      max: 18,\n      step: 1,\n      unit: \"px\",\n      label: \"Range Example\",\n      default: 16,\n      info: \"Optional information about this range\"\n    }\n  },\n  image_picker: {\n    component: ImagePicker,\n    json: {\n      type: \"image_picker\",\n      id: \"image_picker_example\",\n      label: \"Image Picker Example\"\n    }\n  }\n}\n\nexport { splitByHeaders, translate, inputs };\n","import React from 'react';\nimport { Subheading } from '@shopify/polaris';\n\nfunction Heading(props) {\n  return (\n    <Subheading>{ props.content }</Subheading>\n  )\n}\n\nexport default Heading;\n","import React from 'react';\nimport { Stack } from '@shopify/polaris';\n\nfunction Color(props) {\n  return (\n    <Stack wrap={false}>\n      <div style={{ background: props.default, borderRadius: '3px', height: '19px', width: '38px' }}></div>\n      <p>{ props.label }</p>\n    </Stack>\n  )\n}\n\nexport default Color;\n","import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { translate, inputs } from '../utils';\n\nfunction Input(props) {\n  const settings = {...props};\n  settings.value = settings.default;\n  settings.helpText = translate(settings.info);\n  settings.label = translate(settings.label);\n  settings.content = translate(settings.content);\n  settings.choices = settings.options;\n  settings.selected = settings.default;\n\n  const DynamicComponent = inputs[settings.type].component;\n  return (\n    <Draggable draggableId={settings.id+'-'+settings.originalIndex} index={parseInt(settings.originalIndex)}>\n    {provided => {\n      return (\n        <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className=\"draggable\">\n          { DynamicComponent ? <DynamicComponent {...settings} /> : <p><strong>{settings.type}</strong> not supported yet!</p> }\n        </div>\n      )\n    }}\n    </Draggable>\n  )\n\n}\n\nexport default Input;\n","export default [\n    {\n        \"name\": \"Colors\",\n        \"settings\": [\n        ]\n    }\n]\n","import React, { Component } from 'react';\nimport './App.css';\nimport { AppProvider, Page, Card, Layout, TextField, FormLayout, Stack } from '@shopify/polaris';\nimport Sticky from 'react-stickynode';\nimport Input from './components/Input';\nimport settingsSchema from './settings_schema.js';\nimport { splitByHeaders, translate, inputs } from './utils';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nclass App extends Component {\n  state = {\n    tempJson: '',\n    settingsSchema,\n    dragging: null\n  };\n\n  onDragUpdate = ({draggableId}) => {\n    this.setState({ dragging: draggableId })\n  };\n\n  onDragEnd = (result) => {\n    console.dir(result)\n    const { destination, source, draggableId } = result;\n\n    // Ignore toolbar components dropped elsewhere\n    if (source.droppableId === 'toolbar' && !destination) {\n      return;\n    }\n\n    // Ignore components dropped onto the toolbar\n    if (destination && destination.droppableId === 'toolbar') {\n      return;\n    }\n\n    // Clone the settings\n    const settings = [...this.state.settingsSchema];\n\n    // Which section is our source in?\n    const sourceSectionIndex = this.state.settingsSchema.findIndex(setting => {\n      return translate(setting.name) === source.droppableId.split('_')[0]\n    })\n\n    // Allow items to be removed\n    if (!destination) {\n      settings[sourceSectionIndex].settings.splice(source.index, 1);\n      this.setState({ settingsSchema: settings })\n      return;\n    }\n\n    // Which section is our source going to?\n    const destinationSectionIndex = this.state.settingsSchema.findIndex(setting => {\n      return translate(setting.name) === destination.droppableId.split('_')[0]\n    })\n\n    let desinationIndex = destination.index;\n    let input;\n\n    if (source.droppableId === 'toolbar') {\n      input = inputs[draggableId].json\n    } else {\n      // Reference the input, move it\n      input = settings[sourceSectionIndex].settings[source.index];\n      settings[sourceSectionIndex].settings.splice(source.index, 1);\n    }\n\n    settings[destinationSectionIndex].settings.splice(desinationIndex, 0, input);\n    this.setState({ settingsSchema: settings })\n\n    this.outputSchema();\n  }\n\n  updateDimensions = () => {\n    if (document.querySelector('#TextField1')) {\n      document.querySelector('#TextField1').style.maxHeight = window.innerHeight - 170 + 'px'\n    }\n  }\n\n  componentWillUnmount = () => {\n      window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n\n  outputSchema = () => {\n    const output = [...this.state.settingsSchema];\n    this.setState({ tempJson: JSON.stringify(output, null, 4) });\n  }\n\n  componentDidMount = () => {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    this.updateDimensions();\n    this.outputSchema();\n  }\n\n  handleChange = (tempJson) => {\n    // Handle empty panel\n    if (tempJson === '') {\n      tempJson = JSON.stringify([{\"name\": \"First section\",\"settings\": []}], null, 4);\n    }\n\n    this.setState({ tempJson });\n    try {\n      const settingsSchema = JSON.parse(tempJson);\n      this.setState({ settingsSchema });\n      console.log('Valid JSON');\n    } catch (e) {\n      console.log('Waiting for valid JSON');\n    }\n  };\n\n  render() {\n    return (\n    <DragDropContext onDragEnd={this.onDragEnd} onDragUpdate={this.onDragUpdate}>\n    <AppProvider>\n      <Page fullWidth>\n\n      <Card>\n        <Card.Section>\n        <Droppable droppableId=\"toolbar\" direction=\"horizontal\">\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.droppableProps} id=\"toolbar\">\n              <Stack>\n              { Object.keys(inputs).map((input, index) => {\n                if (inputs[input].json) {\n                  return (\n                    <Draggable draggableId={input} index={index} key={input}>\n                      {provided => {\n                        return (\n                          <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={this.state.dragging === input ? 'dragging' : 'lock'}>\n                            <Card subdued>{input}</Card>\n                          </div>\n                        )\n                      }}\n                    </Draggable>\n                  )\n                }\n              })}\n              </Stack>\n              {provided.placeholder}\n            </div>\n          )}\n          </Droppable>\n        </Card.Section>\n      </Card>\n      <p>&nbsp;</p>\n        <Layout>\n          <Layout.Section secondary>\n          <Card>\n            {\n              this.state.settingsSchema.map && this.state.settingsSchema.map((section) => {\n\n              if (section.name == 'theme_info') return\n\n              return (\n                <div key={translate(section.name)}>\n                  <Card.Section>\n                    <p>{ translate(section.name) }</p>\n                  </Card.Section>\n                  <Card sectioned subdued>\n                    <Droppable droppableId={`${translate(section.name)}`}>\n                      {(provided, snapshot) => (\n                        <div ref={provided.innerRef} {...provided.droppableProps} className={snapshot.isDraggingOver ? 'card-dragging-over preview' : 'preview'}>\n\n                          { !section.settings.length && <p className=\"drop-message\">Drop settings here!</p>}\n\n                          { section.settings && splitByHeaders(section.settings).map(headers => {\n                              // Handle empty sections\n                              if (!headers[0]) return\n\n                              const id = section.name + (headers[0].id || translate(headers[0].content) || translate(headers[0].label))\n                              return (\n                                <Card sectioned key={id} subdued={snapshot.isDraggingOver}>\n                                  <FormLayout>\n                                    { headers && headers.map(setting => {\n                                        let inputId;\n                                        if (setting.id) {\n                                          inputId = setting.id;\n                                        } else if (setting.label) {\n                                          inputId = id + translate(setting.label);\n                                        } else if (setting.content) {\n                                          inputId = id + translate(setting.content);\n                                        }\n                                        setting.id = inputId\n                                        return (\n                                          <Input {...setting} key={inputId} />\n                                        )\n                                      })\n                                    }\n                                    {provided.placeholder}\n                                  </FormLayout>\n                                </Card>\n                              )\n                            })\n                          }\n                        </div>\n                      )}\n                    </Droppable>\n                  </Card>\n                </div>\n              )\n            })\n          }\n          </Card>\n          </Layout.Section>\n          <Layout.Section secondary>\n\n\n              <Card>\n                <Card.Section>\n                  <TextField\n                    labelHidden=\"true\"\n                    placeholder=\"json\"\n                    onChange={this.handleChange}\n                    value={this.state.tempJson}\n                    multiline\n                  />\n                </Card.Section>\n              </Card>\n\n          </Layout.Section>\n        </Layout>\n      </Page>\n    </AppProvider>\n    </DragDropContext>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@shopify/polaris/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}